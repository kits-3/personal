package home.repository.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import home.config.ConnectionFactory;
import home.entity.UserEntity;
import home.repository.IUserRepository;

public class UserRepositoryImpl implements IUserRepository{

	private Connection connection = null;
	private PreparedStatement stmt = null;
	private ResultSet rs = null;
	
	private Connection getConnection() throws SQLException {
		Connection conn = null;
		conn = ConnectionFactory.getInstance().getConnection();
		return conn;
	}
	
	@Override
	public ArrayList<UserEntity> getListUser() {
		ArrayList<UserEntity> listUser = new ArrayList<UserEntity>();
		try {
			String queryString = "select * from user";
			connection = getConnection();
			stmt = connection.prepareStatement(queryString);
			rs = stmt.executeQuery();
			while(rs.next()) {
				UserEntity user = new UserEntity();
				user.setId(rs.getInt("id"));
				user.setUsername(rs.getString("username"));
				user.setPassword(rs.getString("password"));
				user.setEmail(rs.getString("email"));
				user.setRole_id(rs.getInt("role_id"));
				user.setLname(rs.getString("lname"));
				user.setFname(rs.getString("fname"));
				user.setBirthday(rs.getString("birthday"));
				user.setCreate_date(rs.getString("create_date"));
				user.setUpdate_date(rs.getString("update_date"));
				user.setDelete_date(rs.getString("delete_date"));
				user.setStatus(rs.getInt("status"));
				user.setDisplay(rs.getInt("display"));
 				user.setPhone(rs.getString("phone"));
				
				listUser.add(user);
			}
		} catch (SQLException e) {
			listUser = null;
			e.printStackTrace();
		}
		finally {
			try {
				if (connection != null) {
					connection.close();
				}
				if (stmt != null) {
					stmt.close();
				}
				if (rs != null) {
					rs.close();
				}
			}
			catch (SQLException e) {
				System.out.println(e);
			}
		}
		return listUser;
	}

	@Override
	public UserEntity setUserLogin(String userName, String passWord) {
		UserEntity user = new UserEntity();
		try {
			String queryString = "select * from user where username = ? and password = ?";
			connection = getConnection();
			stmt = connection.prepareStatement(queryString);
			stmt.setString(1, userName);
			stmt.setString(2, passWord);
			rs = stmt.executeQuery();
			int index = 0;
			while(rs.next()) {
				user.setId(rs.getInt("id"));
				user.setUsername(rs.getString("username"));
				user.setPassword(rs.getString("password"));
				user.setEmail(rs.getString("email"));
				user.setRole_id(rs.getInt("role_id"));
				user.setLname(rs.getString("lname"));
				user.setFname(rs.getString("fname"));
				user.setBirthday(rs.getString("birthday"));
				user.setCreate_date(rs.getString("create_date"));
				user.setUpdate_date(rs.getString("update_date"));
				user.setDelete_date(rs.getString("delete_date"));
				user.setStatus(rs.getInt("status"));
				user.setDisplay(rs.getInt("display"));
				user.setDescription(rs.getString("description"));
				user.setPhone(rs.getString("phone"));
				index++;
			}
			if (index == 0) {
				user = null;
			}
		} catch (SQLException e) {
			user = null;
			e.printStackTrace();
		}
		finally {
			try {
				if (connection != null) {
					connection.close();
				}
				if (stmt != null) {
					stmt.close();
				}
				if (rs != null) {
					rs.close();
				}
			}
			catch (SQLException e) {
				System.out.println(e);
			}
		}
		return user;
	}

	@Override
	public boolean setUserRegister(String userName, String passWord, String email, String lname, String fname,
			String phone) {
		boolean isRegisterSuccess = false;
		try {
			String queryString = "INSERT INTO user (username, password, email, lname, fname, phone) VALUES (?, ?, ?, ?, ?, ?);";
			connection = getConnection();
			stmt = connection.prepareStatement(queryString);
			stmt.setString(1, userName);
			stmt.setString(2, passWord);
			stmt.setString(3, email);
			stmt.setString(4, lname);
			stmt.setString(5, fname);
			stmt.setString(6, phone);
			int isSuccess = stmt.executeUpdate();
			if (isSuccess > 0) {
				isRegisterSuccess = true;
			} else {
				isRegisterSuccess = false;
			}
			
		} catch (SQLException e) {
			isRegisterSuccess = false;
		}
		finally {
			try {
				if (connection != null) {
					connection.close();
				}
				if (stmt != null) {
					stmt.close();
				}
				if (rs != null) {
					rs.close();
				}
			}
			catch (SQLException e) {
			}
		}
		return isRegisterSuccess;
	}

	@Override
	public boolean isChangePasswordUser(String userName, String passWord) {
		boolean isSucces = false;
		try {
			String queryString = "select * from user where username = ? and password = ?";
			connection = getConnection();
			stmt = connection.prepareStatement(queryString);
			stmt.setString(1, userName);
			stmt.setString(2, passWord);
			int index = 0;
			while(rs.next()) {
				index++;
			}
			if (index == 0) {
				isSucces = false;
			} else {
				isSucces = true;
			}
			
		} catch (SQLException e) {
			isSucces = false;
		}
		finally {
			try {
				if (connection != null) {
					connection.close();
				}
				if (stmt != null) {
					stmt.close();
				}
				if (rs != null) {
					rs.close();
				}
			}
			catch (SQLException e) {
			}
		}
		return isSucces;
	}

	@Override
	public boolean isUpdateInformationSuccess(int idUser, String password, String email, String lname, String fname,
			String description, String phone) {
		boolean isSuccess = false;
		try {
			String queryString = "UPDATE user SET password = ?, email = ?, lname = ?, fname = ?, description = ?, phone = ? WHERE id = ?";
			connection = getConnection();
			stmt = connection.prepareStatement(queryString);
			stmt.setString(1, password);
			stmt.setString(2, email);
			stmt.setString(3, lname);
			stmt.setString(4, fname);
			stmt.setString(5, description);
			stmt.setString(6, phone);
			stmt.setInt(7, idUser);
			int count = stmt.executeUpdate();
			if(count > 0) {
				isSuccess = true;
			} else {
				isSuccess = false;
			}
		} catch (SQLException e) {
			isSuccess = false;
			e.printStackTrace();
		}
		finally {
			try {
				if (connection != null) {
					connection.close();
				}
				if (stmt != null) {
					stmt.close();
				}
				if (rs != null) {
					rs.close();
				}
			}
			catch (SQLException e) {
				System.out.println(e);
			}
		}
		return isSuccess;
	}

}
