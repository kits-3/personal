package home.repository.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import home.config.ConnectionFactory;
import home.entity.TaskEntity;
import home.repository.ITaskRepository;

public class TaskReopsitoryImpl implements ITaskRepository{

	private Connection connection = null;
	private PreparedStatement stmt = null;
	private ResultSet rs = null;
	
	private Connection getConnection() throws SQLException {
		Connection conn = null;
		conn = ConnectionFactory.getInstance().getConnection();
		return conn;
	}
	
	@Override
	public ArrayList<TaskEntity> getAllTaskByIdUser(int idUser) {
		ArrayList<TaskEntity> lsTask = new ArrayList<TaskEntity>();
		try {
			String queryString = "SELECT * FROM task WHERE OWNER = ? and display = 1;";
			connection = getConnection();
			stmt = connection.prepareStatement(queryString);
			stmt.setInt(1, idUser);
			rs = stmt.executeQuery();
			int count = 0;
			while(rs.next()) {
				TaskEntity task = new TaskEntity();
				task.setId(rs.getInt("id"));
				task.setHeader(rs.getString("header"));
				task.setOwner(rs.getInt("owner"));
				task.setCreate_date(rs.getString("create_date"));
				task.setUpdate_date(rs.getString("update_date"));
				task.setDelete_date(rs.getString("delete_date"));
				task.setDeadline_date(rs.getString("deadline"));
				task.setStatus(rs.getInt("status"));
				task.setDisplay(rs.getInt("display"));
				task.setDescription(rs.getString("description"));
				
				lsTask.add(task);
				count++;
			}
			if (count == 0) {
				lsTask = null;
			}
		} catch (SQLException e) {
			lsTask = null;
			e.printStackTrace();
		}
		finally {
			try {
				if (connection != null) {
					connection.close();
				}
				if (stmt != null) {
					stmt.close();
				}
				if (rs != null) {
					rs.close();
				}
			}
			catch (SQLException e) {
				System.out.println(e);
			}
		}
		return lsTask;
	}

	@Override
	public boolean isCheckTaskExistByUserId(String header, int idUser) {
		boolean isSuccess = false;
		try {
			String queryString = "insert into task (header, owner) values (?, ?);";
			connection = getConnection();
			stmt = connection.prepareStatement(queryString);
			stmt.setString(1, header);
			stmt.setInt(2, idUser);
			int count  = stmt.executeUpdate();
			if (count > 0) {
				isSuccess = true;
			} else {
				isSuccess = false;
			}
		} catch (SQLException e) {
			isSuccess = false;
			e.printStackTrace();
		}
		finally {
			try {
				if (connection != null) {
					connection.close();
				}
				if (stmt != null) {
					stmt.close();
				}
				if (rs != null) {
					rs.close();
				}
			}
			catch (SQLException e) {
				System.out.println(e);
			}
		}
		return isSuccess;
	}

	@Override
	public TaskEntity taskSelect(int idUser, int idTask) {
		TaskEntity task = new TaskEntity();
		try {
			String queryString = "select * from task where owner = ? and task.id = ?";
			connection = getConnection();
			stmt = connection.prepareStatement(queryString);
			stmt.setInt(1, idUser);
			stmt.setInt(2, idTask);
			rs = stmt.executeQuery();
			int index = 0;
			while(rs.next()) {
				task.setId(rs.getInt("id"));
				task.setHeader(rs.getString("header"));
				task.setOwner(rs.getInt("owner"));
				task.setCreate_date(rs.getString("create_date"));
				task.setUpdate_date(rs.getString("update_date"));
				task.setDelete_date(rs.getString("delete_date"));
				task.setDeadline_date(rs.getString("deadline"));
				task.setStatus(rs.getInt("status"));
				task.setDisplay(rs.getInt("display"));
				task.setDescription(rs.getString("description"));
				index++;
			}
			if (index == 0) {
				task = null;
			}
		} catch (SQLException e) {
			task = null;
			e.printStackTrace();
		}
		finally {
			try {
				if (connection != null) {
					connection.close();
				}
				if (stmt != null) {
					stmt.close();
				}
				if (rs != null) {
					rs.close();
				}
			}
			catch (SQLException e) {
				System.out.println(e);
			}
		}
		return task;
	}

	@Override
	public boolean isCheckUpdateTaskSuccess(int idTask, String header, int status, int display, String description) {
		boolean isSuccess = false;
		try {
			String queryString = "UPDATE task SET header = ?, update_date = NOW(), status = ?, display = ?, description = ? WHERE id = ?";
			connection = getConnection();
			stmt = connection.prepareStatement(queryString);
			stmt.setString(1, header);
			stmt.setInt(2, status);
			stmt.setInt(3, display);
			stmt.setString(4, description);
			stmt.setInt(5, idTask);
			int count = stmt.executeUpdate();
			if(count > 0) {
				isSuccess = true;
			} else {
				isSuccess = false;
			}
		} catch (SQLException e) {
			isSuccess = false;
			e.printStackTrace();
		}
		finally {
			try {
				if (connection != null) {
					connection.close();
				}
				if (stmt != null) {
					stmt.close();
				}
				if (rs != null) {
					rs.close();
				}
			}
			catch (SQLException e) {
				System.out.println(e);
			}
		}
		return isSuccess;
	}

	@Override
	public boolean isCheckUpdateTaskByStatusOrDisplayOrDescription(int idTask, int status, int display,
			String description) {
		boolean isSuccess = false;
		try {
			String queryString = "UPDATE task SET update_date = NOW(), status = ?, display = ?, description = ? WHERE id = ?";
			connection = getConnection();
			stmt = connection.prepareStatement(queryString);
			stmt.setInt(1, status);
			stmt.setInt(2, display);
			stmt.setString(3, description);
			stmt.setInt(4, idTask);
			int count = stmt.executeUpdate();
			if (count > 0) {
				isSuccess = true;
				if (display == 0) {
					queryString = "UPDATE taskdetail SET update_date = NOW(), display = ? WHERE task_id = ?";
					connection = getConnection();
					stmt = connection.prepareStatement(queryString);
					stmt.setInt(1, display);
					stmt.setInt(4, idTask);
					int countDeleteTaskDetail = stmt.executeUpdate();
					if (countDeleteTaskDetail > 0) {
						isSuccess = true;
					} else {
						isSuccess = false;
					}
				}
			} else {
				isSuccess = false;
			}
		} catch (SQLException e) {
			isSuccess = false;
		}
		finally {
			try {
				if (connection != null) {
					connection.close();
				}
				if (stmt != null) {
					stmt.close();
				}
				if (rs != null) {
					rs.close();
				}
			}
			catch (SQLException e) {
			}
		}
		return isSuccess;
	}

}
