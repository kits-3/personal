package home.repository.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import home.config.ConnectionFactory;
import home.entity.TaskDetailEntity;
import home.repository.ITaskDetailRepository;

public class TaskDetailRepositoryImpl implements ITaskDetailRepository {

	private Connection connection = null;
	private PreparedStatement stmt = null;
	private ResultSet rs = null;

	private Connection getConnection() throws SQLException {
		Connection conn = null;
		conn = ConnectionFactory.getInstance().getConnection();
		return conn;
	}

	@Override
	public ArrayList<TaskDetailEntity> getListTaskDetailByIdTask(int idTask) {
		ArrayList<TaskDetailEntity> listTaskDetail = new ArrayList<TaskDetailEntity>();
		try {
			String queryString = "SELECT * FROM taskdetail WHERE task_id = ?";
			connection = getConnection();
			stmt = connection.prepareStatement(queryString);
			stmt.setInt(1, idTask);
			rs = stmt.executeQuery();
			int index = 0;
			while (rs.next()) {
				TaskDetailEntity taskDetailEntity = new TaskDetailEntity();
				taskDetailEntity.setId(rs.getInt("id"));
				taskDetailEntity.setContent(rs.getString("content"));
				taskDetailEntity.setTask_id(rs.getInt("task_id"));
				taskDetailEntity.setCreate_date(rs.getString("create_date"));
				taskDetailEntity.setUpdate_date(rs.getString("update_date"));
				taskDetailEntity.setDelete_date(rs.getString("delete_date"));
				taskDetailEntity.setStatus(rs.getInt("status"));
				taskDetailEntity.setDisplay(rs.getInt("display"));
				taskDetailEntity.setDescription(rs.getString("description"));
				index++;
				listTaskDetail.add(taskDetailEntity);
			}
			if (index == 0) {
				listTaskDetail = null;
			}
		} catch (SQLException e) {
			listTaskDetail = null;
			e.printStackTrace();
		} finally {
			try {
				if (connection != null) {
					connection.close();
				}
				if (stmt != null) {
					stmt.close();
				}
				if (rs != null) {
					rs.close();
				}
			} catch (SQLException e) {
				System.out.println(e);
			}
		}
		return listTaskDetail;
	}

	@Override
	public boolean isInsertTaskDetailSuccess(int idTask, String content) {
		boolean isInsertSuccess = false;
		try {
			String queryString = "insert into taskdetail (content, task_id) values (?, ?)";
			connection = getConnection();
			stmt = connection.prepareStatement(queryString);
			stmt.setString(1, content);
			stmt.setInt(2, idTask);
			int count = stmt.executeUpdate();
			if (count > 0) {
				isInsertSuccess = true;
			} else {
				isInsertSuccess = false;
			}
		} catch (SQLException e) {
			isInsertSuccess = false;
		}
		finally {
			try {
				if (connection != null) {
					connection.close();
				}
				if (stmt != null) {
					stmt.close();
				}
				if (rs != null) {
					rs.close();
				}
			}
			catch (SQLException e) {
			}
		}
		return isInsertSuccess;
	}

	@Override
	public boolean updateTaskDetailSuccess(int idTaskDetail, String content, int status, int display,
			String description) {
		boolean isSuccess = false;
		try {
			String queryString = "UPDATE taskdetail SET content = ?, update_date = NOW(), status = ?, display = ?, description = ? WHERE id = ?";
			connection = getConnection();
			stmt = connection.prepareStatement(queryString);
			stmt.setString(1, content);
			stmt.setInt(2, status);
			stmt.setInt(3, display);
			stmt.setString(4, description);
			stmt.setInt(5, idTask);
			int count = stmt.executeUpdate();
			if(count > 0) {
				isSuccess = true;
			} else {
				isSuccess = false;
			}
		} catch (SQLException e) {
			isSuccess = false;
			e.printStackTrace();
		}
		finally {
			try {
				if (connection != null) {
					connection.close();
				}
				if (stmt != null) {
					stmt.close();
				}
				if (rs != null) {
					rs.close();
				}
			}
			catch (SQLException e) {
				System.out.println(e);
			}
		}
		return isSuccess;
	}
}
